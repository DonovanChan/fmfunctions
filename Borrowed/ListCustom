/**
 * =====================================
 * CustomList ( start ; end ; function )
 *
 * PURPOSE:
 * 		Evaluate a FileMaker function across a specified range of data
 *		(e.g. records from a portal or records in a list view)
 *
 * RETURNS:
 * 		A return delimted list of data based on the evaluation of the "function" parameter
 *
 * PARAMETERS:
 * 		start: The starting point for the total number of iterations
 * 		end: The ending point for the total number of iterations
 * 		function: A properly quoted FileMaker function where the literal value of [n] is used
 *			as the iterator. (see examples)
 *
 * EXAMPLES:
 *		CustomList ( 1 ; Get ( FoundCount ) ; "GetNthRecord ( FirstName ; [n] )" )
 *			will return James¶Henry¶Susan if your foundset has 3 records.
 * 		CustomList ( 10 ; 100 ; "Let ( [ Value = GetValue ( MyList ; [n] ) ] ; Case ( PatternCount ( Value ; "X" ) ; Value ))" )
 *			will parse any value containing a "X" in  the 'MyList' chain, in between the 10th and the 100th values.
 * 		CustomList ( 1 ; 5 ; "GetAsDate ( StartingDate ) + [n]" )
 *			will return a range of 5 dates starting from the specified StartingDate.
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		This custom function will build any value list based on any native or
 *		Custom Functions involving a 'Number' value as a parameter, such
 *		as : Left(), Right(), Middle(), GetValue(), GetRepetitionNumber (),
 *		GetNthRecord(), GetLayoutObjectAttribute ()
 *
 *		The new CustomList() is faster and still is NOT recursive. The
 *		arguments are unchanged which makes it compatible with all your
 *		previous developments involving CustomList().
 *		
 *		For Developer ease, the new CustomList() includes a debugging mode.
 *		find the "*****DEBUGGING MODE*****" tag in the formula below to switch
 *		mode. When debug is set to 1, any error will be returned with its
 *		appropriate explanatory code, else the result will be set to "?"
 *
 * HISTORY:
 * 		ADAPTED to fit filemakerstandards.org by Matt Petrowsky on 4/1/11
 *		UPDATED August'10 for adaptation to FileMaker Go
 *		MAJOR UPDATE July'08 to account for a larger range
 * 		CREATED by Agnès Barouh - filemaker@tictac.fr
 *
 * REFERENCES:
 * 		Master version found at: http://fmfunctions.com/functions_display_record.php?functionId=118
 * =====================================
 *		Special Thanks to Ugo Di Luca - Grazie Mille for all his comments and his notice ® Ugo Di Luca
 *		See the 'Under the Hood' part at the end of this function to fully understand the processing of this function
 */


Case (

	// This function will not evaluate if invalid parameters are passed in for Start and End.
	IsEmpty ( start ) or IsEmpty ( end ) or end < 1 or start < 1;
		"";
          
	Let ( [
		start = GetAsNumber ( start );
		end = GetAsNumber ( end );
		diff = end - start + 1;
		V = Left ( Get ( ApplicationVersion ) ; 2 ) = "Go";
		PL = Choose ( V ; 1700  ; 400 );

		/*
		Check for a range higher than 500,000 values or
		150 000 values for FmGo. CustomList() is voluntarily
		restrained to these limits.
		*/

		end = Case (
				( diff > Choose ( V ; 500000  ; 150000 ) )
				or ( end < start )
				or IsEmpty ( start )
				or IsEmpty ( end );
					"Error";
				
				end
				);
		
		$~null = "\"\"";

		/*
		CustomList has its own recursion model. As CustomList
		may be involved into the "function" argument, each
		CustomList expression used is passed to a repeating
		variable for evaluation
		*/

		iter = Let ( $~CLExeCount = $~CLExeCount + 1 ; $~CLExeCount & PatternCount ( function ; "CustomList" ) + 1 );
		$~CLn[ iter ] = start - 1;

		calc = Case (
					diff ≥ ( PL - 10 );
						( PL / 10 );
						
					Floor ( diff / 10 ) + 1
				);

		/*
		Here where the "magic" starts for the Substitutions and
		the entire mechanism.  CustomList() evaluates
		stacks of 1,700 values at a time ( 400 for FileMakerGo ),
		which is the current limit of the FileMaker Evaluate function
		*/

		first = Substitute ( ( 10 ^ calc ) - 1; 9; "__________" ) ;  
		X = Floor ( diff / PL );
		$~CLRemainder[ iter ]  = diff - ( X * PL );

		/*When the "function" argument is left empty, CustomList() will return a numeric list based on the range defined */

		functionR = Case ( IsEmpty ( function ); "~CLNum"; Substitute ( function; ["[n]"; "~CLNum"] ; [¶ ; ""] ) );

		/*
		Each repeating variable's content is parsed in order
		to get our String ready for the last evaluation -
		Special care is made for French users here, please
		substitute the "definir" below with your local
		translation of the "Let" function if you're not
		using an english version. The use of "Let ([" is
		recommended anyway.
		*/

		$~CLExecute[ iter ] = Case ( Left ( Substitute ( Lower ( function ); ["definir"; "Let" ]; [" "; ""]; ["¶"; ""]); 5 ) = "Let([";
		                   Substitute (  first ; [ "_";  "Let([$~CLn[" & iter & "]=$~CLn[" & iter & "]+1;~CLNum=$~CLn[" & iter & "];" &
		                   Replace ( functionR; 1; Position ( functionR; "["; 1; 1 ); "" ) & "&\¶&¶"] );
		                   Substitute ( first ; [ "_";  "Let([$~CLn[" & iter & "]=$~CLn[" & iter & "]+1;~CLNum=$~CLn[" & iter & "]];" & functionR & ")&\¶&¶"] ) );

		/*
		Final compilation starts here. The remaining part
		beyond each group of 1,700 values is treated now.
		*/

		 final = Case ( X > 0; Substitute ( ( 10 ^ X ) - 1; 9; "Evaluate ( $~CLExecute[" & iter & "] & $~null ) & " ) ) &
		             "Evaluate( LeftValues ( $~CLExecute[" & iter & "] ; $~CLRemainder[" & iter & "]  ) & $~null ) & " & $~null;

		/*The Final variable can now be evaluated to get our List*/

		 Result  =   Case ( end <> "Error"; Substitute ( "#^#" & Evaluate  ( final ) & "#^#";
		                  [ "#^#|#^#"; "¶" ]; [ "¶"; "¶#^#" ]; [ "#^#¶"; "" ]; [ "¶#^#"; "¶" ]; [ "¶#^#"; "" ]; [ "#^#"; "" ] ) ) ;
		 $~CLExecute[ iter ]  = "" 

	]; // ----------- FUNCTION RESULT BELOW -----------
	
		/*
		CustomList returns either the valid result, or an
		error formatted according to the debugging mode
		chosen above
		*/

		Case (
			( Length ( Result ) and ( Result = Filter ( Result; "?" ) ) )
			or end = "Error";
				Let ([
					/*****DEBUGGING MODE*****/   // Case Debug = 1, returned error "[error_CL], Number, Name and Calculation error" ,if Debug  <> 1, returned error is "?"
					Debug = "1";
					Write = Substitute ( function; "[n]"; 1 ); NumError = EvaluationError ( Evaluate ( Write ) );
					Error = "[" & NumError & "] " & "Unlisted error | Unknown error, check calculation or check \"start\" and \"end\" ¶102 | Field is missing¶103 | Relationship is missing¶106 | Table is missing¶113 | Function is missing¶1204 | Number, text constant, field name or \"(\" expected¶1205 | Comment is not terminated with \"*/\"¶1206 | Text constant must end with a quotation mark¶1207 | Unbalanced parenthesis¶1208 | Operator or function missing or \"(\" not expected¶1211 | List usage is not allowed in this function¶1212 | An operator (for example, +, -, *,;) is expected here¶1215 | This parameter is an invalid Get function parameter";
					Pos = ValueCount ( Left ( Error; Position ( Error; NumError & " "; 1; 1 ) ) )
				];
					Case (
						Debug = 1;
							"[Error_CL]  | Return error : "
							& GetValue ( Error; Case ( Pos = 0; 1; Pos ) )
							& ¶
							& TextStyleAdd ( "Calculation ( for [n] = 1 ) : "; Bold )
							& Write;
				
						"?"
					)
				);
	
			Result
		)
	)
)

// ----------- UNDER THE HOOD -----------

/*
	Basically, CustomList() does two things:

	1) First, transform your formula into a litteral chain:

	CustomList ( 1; 4; "GetNthRecord ( Field ; [n])")
	therefore becomes...

	"Let ([ ~CLNum = 1 ] ; GetNthRecord ( Field ; ~CLNum )) & ¶ &
	Let ([ ~CLNum = 2 ] ; GetNthRecord ( Field ; ~CLNum )) & ¶ &
	Let ([ ~CLNum = 3 ] ; GetNthRecord ( Field ; ~CLNum )) & ¶ &
	Let ([ ~CLNum = 4 ] ; GetNthRecord ( Field ; ~CLNum ))"

	2) Evaluates this chain in batches based on Evaluate() limitations.

	Interrested in the mechanism ?

	My advice: dissect this function by escaping the 'Result' and placing
	one of the numerous intermediary variables available.  Special
	attention should be paid to the 'First' Variable, everything starts
	from there !
*/