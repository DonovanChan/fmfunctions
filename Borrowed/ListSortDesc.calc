Case(
    //  One value left in list - return just that value
    ValueCount( theList ) <= 1;
       LeftValues (theList; 1 );
       
   //   Default
    Let(
        [ 
        //  split list in two
        length = ValueCount( theList );
        leftLength = Floor( length / 2 );
        rightLength = length - leftLength;
        leftList = LeftValues( theList; leftLength);
        rightList = RightValues( theList; rightLength);
        //  sort each sub-list
        sortedLeft = ListSortDesc( leftList );
        sortedRight = ListSortDesc( rightList );
        //  merge the two sorted lists
        mergedList = ListSortDescLoop( sortedLeft; sortedRight )
        ];
        mergedList 
    )
)

/* —————————————————————————————— //
NAME:
    ListSortDesc( theList )
    v1.1

PURPOSE:
    Sort a return-delimited list descending using the “mergesort” algorithm

HISTORY:
    Created by Soliant Consulting (See below or FM 8 Functions p. 228)
    Modified 2008.06.17 by DChandler for formatting/commenting preference
    Modified 2010.10.29 by DChandler for descending order

INPUT:
    theList:  return-delimited list of values

OUTPUT:
    The same list, sorted ascending

DEPENDENCIES:
    Requires the ListSortDescLoop() function

Function created by Soliant Consulting
www.soliantconsulting.com

Released under the Creative Commons Attribution 2.5 License
http://creativecommons.org/licenses/by/2.5/
*/