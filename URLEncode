Let ( [
	~queryDelimStart = Position ( url ; "?" ; 1 ; 1 ) ;
	~queryStart = ~queryDelimStart + 1 ;
	~fragmentDelimStart = Position ( url ; "#" ; ~queryStart ; 1 ) ;
	~queryEnd = If ( ~fragmentDelimStart = 0 ; Length ( url ) ; ~fragmentDelimStart - 1 ) ;
	~pathEnd =
		Case (
			~queryDelimStart ; ~queryDelimStart - 1 ;
			~fragmentDelimStart ; ~fragmentDelimStart - 1 ;
			Length ( url )
		) ;
	~path = Left ( url ; ~pathEnd ) ;
	~query = If ( ~queryDelimStart ; Middle ( url ; ~queryStart ; ~queryEnd - ~queryStart + 1 ) ) ;
	~fragment = If ( ~fragmentDelimStart ; Middle ( url ; ~fragmentDelimStart + 1 ; 999 ) )
	] ;
	Substitute ( ~path
		// Shared substitutions
		; [ Char ( 147 )		; "\\\"" ]	// left curly quote
		; [ Char ( 148 )		; "\\\"" ]	// right curly quote
		; [ Char ( 8220 )	; "\\\"" ]	// left curly quote
		; [ Char ( 8221 )	; "\\\"" ]	// right curly quote
		; [ "%"	; "%25" ]
		; [ "¶"	; "%0D" ]
		; [ "\""	; "%22" ]
		; [ "#"	; "%23" ]
		; [ "<"	; "%3C" ]
		; [ ">"	; "%3E" ]
		; [ "`"	; "%60" ]
		; [ "\\"	; "%5C" ]
		; [ "^"	; "%5E" ]
		; [ "`"	; "%60" ]
		; [ "{"		; "%7B" ]
		; [ "|"		; "%7C" ]
		; [ "}"		; "%7D" ]

		// Path segment only - to be escaped prior to this function
		; [ " "		; "%20" ]
		//; [ "/"	; "%2F" ]
		//; [ "?"		; "%3F" ] // You must escape "?" prior to this function if you have it in your path segment
		; [ "["		; "%5B" ]
		; [ "]"		; "%5D" ]
	)
	& If ( not IsEmpty ( ~query ) ;
		"?" & Substitute ( ~query
			// Shared substitutions
			; [ Char ( 147 )		; "\\\"" ]	// left curly quote
			; [ Char ( 148 )		; "\\\"" ]	// right curly quote
			; [ Char ( 8220 )	; "\\\"" ]	// left curly quote
			; [ Char ( 8221 )	; "\\\"" ]	// right curly quote
			; [ "%"	; "%25" ]
			; [ "¶"	; "%0D" ]
			; [ "\""	; "%22" ]
			; [ "#"	; "%23" ]
			; [ "<"	; "%3C" ]
			; [ ">"	; "%3E" ]
			; [ "`"	; "%60" ]
			; [ "\\"	; "%5C" ]
			; [ "^"	; "%5E" ]
			; [ "`"	; "%60" ]
			; [ "{"		; "%7B" ]
			; [ "|"		; "%7C" ]
			; [ "}"		; "%7D" ]

			//-- Query segment only
			// Substitutions for inner value of each pair
			//; [ "&"	; "%26" ]
			//; [ "["		; "%5B" ]
			//; [ "]"		; "%5D" ]

			// Commenting out characters that are usually allowed
			; [ "+"	; "%2B" ]
			; [ ":"		; "%3A" ]
			; [ "@"	; "%40" ]
			//; [ "-"	; "%2D" ]
			; [ "."		; "%2E" ]
			//; [ "~"	; "%7E" ]
			; [ " "		; "+" ]
			//; [ "!"		; "%21" ]
			; [ "$"	; "%24" ]
			//; [ "'"		; "%27" ]
			//; [ "("		; "%28" ]
			//; [ ")"		; "%29" ]
			//; [ "*"		; "%2A" ]
			; [ ","		; "%2C" ]
			; [ ";"		; "%3B" ]
		)
	) & If ( not IsEmpty ( ~fragment ) ;
		"#" & Substitute ( ~fragment
			// Shared substitutions
			; [ Char ( 147 )		; "\\\"" ]	// left curly quote
			; [ Char ( 148 )		; "\\\"" ]	// right curly quote
			; [ Char ( 8220 )	; "\\\"" ]	// left curly quote
			; [ Char ( 8221 )	; "\\\"" ]	// right curly quote
			; [ "%"	; "%25" ]
			; [ "¶"	; "%0D" ]
			; [ "\""	; "%22" ]
			; [ "#"	; "%23" ]
			; [ "<"	; "%3C" ]
			; [ ">"	; "%3E" ]
			; [ "`"	; "%60" ]
			; [ "\\"	; "%5C" ]
			; [ "^"	; "%5E" ]
			; [ "`"	; "%60" ]
			; [ "{"		; "%7B" ]
			; [ "|"		; "%7C" ]
			; [ "}"		; "%7D" ]

			// Fragment segment only
			; [ " "		; "%20" ]
			; [ "["		; "%5B" ]
			; [ "]"		; "%5D" ]
		)

	)
)

/* —————————————————————————————— //
NAME:
	URLEncode ( url )

PURPOSE:
	Converts illegal and reserved characters in input string into URL-legal
	hex code. Complete table of hexadecimal codes can be found here
	http://www.december.com/html/spec/ascii.html.

NOTES:
	Different characters need to be escaped depending on where they are in the URL.
	URL fragments, according to this function:
	"http://www.example.com/file?q=why&q=because#foo"
	~path = "http://www.example.com/file"
	~query = "q=why&q=because"
	~fragment = "foo"

	Additional resources:
	http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding
	http://weblog.cenriqueortiz.com/java-me-midp-articles-tech-tips-source-code/tech-tip-simple-url-encoder/

EXAMPLES:
	List (
	  URLEncode ( "http://www.go-go/foo fum" ) = "http://www.go-go/foo%20fum"
	; URLEncode ( "https://www.google.com/#q=Time's a-wastin'" ) = "https://www.google.com/#q=Time's%20a-wastin'"
	; URLEncode ( "https://www.google.com?q=Time's a-wastin'" ) = "https://www.google.com?q=Time's+a-wastin'"
	; URLEncode ( "http://example.com/blue+light blue?Blue+Light Blue#foo" ) = "http://example.com/blue+light%20blue?blue%2Blight+blue#foo"
	; URLEncode ( "http://example.com#foo" ) = "http://example.com#foo"
	)

HISTORY:
	Created by Jeremiah Small - http://www.briandunning.com/cf/165
	2011-04-19 09:42 PDT — Donovan Chandler : format ; add "`~"
	2014-04-08 13:29 PDT - Donovan Chandler : complete refactor based on url parts; convert curly quotes; add examples.
 chars
*/