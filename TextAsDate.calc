Let ( [
	string = text ;
	mapping = characterMapping ;
	
	//---- MEASURE VARIABLE WIDTH VALUES FIRST
	//---- must process in order they appear in mapping
	//-- Month number or name
	sMon = Position ( mapping ; "mon" ; 1 ; 1 ) ;
	sMMM = Position ( mapping ; "mmm" ; 1 ; 1 ) ;
	sMM = Position ( mapping ; "m" ; 1 ; 1 ) ;
	sMonth = If ( sMon + sMMM > 0 ; sMon + sMMM ; sMM ) ;
	monthCount = PatternCount ( Substitute ( mapping ; "mon" ; "mmm" ) ; "m" ) ;
	monthRaw =
		Case (
			sMon = 0 and sMMM = 0 ;
				Middle ( string ; sMM ; monthCount ) ;
			Let ( [
				str = Middle ( string ; sMon + sMMM ; 3 ) ;
				match = "xxJanFebMarAprMayJunJulAugSepOctNovDec"
				] ;
				Position ( match ; str ; 1 ; 1 ) / 3
			)
		) ;
	month = Filter ( monthRaw ; "0123456789" ) ;
	monthPadded = Right ( "..." & month ; monthCount ) ;
	remapMonth = monthRaw ≠ month ;
	mapping =
		Case (
			Position ( mapping ; "mon" ; 1 ; 1 ) ;
				Substitute ( mapping ; "mon" ;
					Left ( "............" ; Length ( DateMonthName ( month ; False ) ) ) 
				) ;
			remapMonth ; Replace ( mapping ; sMonth ; monthCount ; month ) ;
			mapping
		) ;
	
	//-- Day
	sDay = Position ( mapping ; "d" ; 1 ; 1 ) ;
	dayCount = PatternCount ( mapping ; "d" ) ;
	dayRaw = Middle ( string ; sDay ; dayCount ) ;
	day = Filter ( dayRaw ; "0123456789" ) ;
	remapDay = dayRaw ≠ day ;
	mapping =
		Case (
			remapDay ; Replace ( mapping ; sDay ; dayCount ; day ) ;
			mapping
		) ;
	
	//-- Hour
	sHr = Position ( mapping ; "h" ; 1 ; 1 ) ;
	hrCount = PatternCount ( mapping ; "h" ) ;
	hrRaw = Middle ( string ; sHr ; hrCount ) ;
	hr = Filter ( hrRaw ; "0123456789" ) ;
	remapHr = hrRaw ≠ hr ;
	mapping =
		Case (
			remapHr ; Replace ( mapping ; sHr ; hrCount ; hr ) ;
			mapping
		) ;
	
	//---- Non-variable values
	sSec = Position ( mapping ; "s" ; 1 ; 1 ) ;
	sMin = Position ( mapping ; "i" ; 1 ; 1 ) ;
	sPM = Position ( mapping ; "p" ; 1 ; 1 ) ;

	sYear = Position ( mapping ; "y" ; 1 ; 1 ) ;
	sCentury = Position ( mapping ; "c" ; 1 ; 1 ) ;
	year = GetAsNumber ( Middle ( string ; sYear ; PatternCount ( mapping ; "y" ) ) ) ;
	century = GetAsNumber ( Middle ( string ; sCentury ; PatternCount ( mapping ; "c" ) ) ) ;

	sec = GetAsNumber ( Middle ( string ; sSec ; PatternCount ( mapping ; "s" ) ) ) ;
	min = GetAsNumber ( Middle ( string ; sMin ; PatternCount ( mapping ; "i" ) ) ) ;
	pmRaw = Middle ( string ; sPM ; 1 ) ;
	pm = Case ( pmRaw = "p" ; "PM" ; pmRaw = "a" ; "AM" ) ;

	hasDate = sDay + month + sYear + sCentury > 0 ;
	hasTime = sSec + sMin + sHr > 0 ;
	dateString = month & "/" & day & "/" & century & year ;
	timeString = hr & ":" & min + 0 & ":" & sec + 0 & " " & pm ;

	result =
		Case (
			hasDate and hasTime ;
				GetAsTimestamp ( dateString & " " & timeString ) ;
			hasDate ;
				GetAsDate ( dateString ) ;
			GetAsTime ( timeString )
		)
	] ;
	Case (
		//-- Enable for debugging
		False ; 
			"dateString=" & dateString & ", timeString=" & timeString &
			"¶year=" & year & ", month=" & month & ", day=" & day & 
			"¶hr=" & hr & ", min=" & min & ", sec=" & sec & ", am/pm=" & pm &
			"¶string=" & string & ", mapping=" & mapping ;

		remapHr and ( sHr < sMonth or sHr < sDay ) ;
			"Invalid mapping: Hour of variable length can't precede Month or Day" ;
		remapDay and ( sDay < sMonth ) ;
			"Invalid mapping: Day of variable length can't precede Month" ;
		result = "?" ; "Invalid mapping: " & characterMapping ;
		result
	)
)

/* —————————————————————————————— //
NAME:
	TextAsDate ( text ; characterMapping )

PURPOSE:
	Converts text string to date, time or timestamp using provided character mapping.

EXAMPLES:
	TextAsDate ( "2008-07-16 13:49:25" ; "ccyy-mm-dd hh:ii:ss")
	= "7/16/2008 1:49:25 PM"
	
	TextAsDate ( "2008-07-16 13:49:25" ; "ccyy-mm-dd")
	= "7/16/2008"
	
	TextAsDate ( "2008-07-16 13:49:25" ; "ccyy-mmm-dd")
	= "7/16/2008"
	
	TextAsDate ( "2008-07-16 13:49:25" ; "....-..-.. hh.ii.ss")
	= "1:49:25"
	
	TextAsDate ( "7/6/08 3:40 PM" ; "mm/dd/yy hh:ii pp")
	= "7/6/2008 3:40 PM"
	
LEGEND for characterMapping:
	cc		Century (either 19 or 20) prepended to the abbreviated year.
	yy		Year in abbreviated form (e.g., 89 for 1989, 06 for 2006).
	mm		Numeric month, a number from 1 to 12.
	mmm	Short string (e.g., "Jan")
	mon	Long string (e.g., "January")
 
	ii		Minutes, a number from 00 to 59.
	ss		Seconds, a number from 00 to 61 (59 plus a maximum of two leap seconds).
	.		Wildcard for one character

NOTES:
	Uses the GetAs... functions because they round dates. E.g.,
		Date ( 1 ; 14 ; 72 )		= "1/14/0072"
		GetAsDate ( "1/14/72" )	= "1/14/1972"
	WARNING: Day of variable length can't precede month
	WARNING: Hour of variable length can't precede month or day

HISTORY:
	Created:	2011-Nov-16 15h09 PST — Donovan Chandler
	Modified:	2011-Dec-28 12h35 PST — Donovan Chandler ; Now traps for unsupported formats
*/