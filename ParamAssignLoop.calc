Let ( [
	//-- Parse input for first parameter
	rowCount = ValueCount ( listOfParams )
	; rowSplit = 
		Substitute ( 
			GetValue ( listOfParams ; 1 )
			; [ ";"	; ¶ ]
			; [ "||"	; ¶ ]
		)
	; nameRaw = GetValue ( rowSplit ; 1 )
	; isOptional = Left ( nameRaw ; 1 ) = "-"
	; name = Trim ( If ( isOptional ; Middle ( nameRaw ; 2 ; 999 ) ; nameRaw ) )
	; value = #P ( name )
	; options = GetValue ( rowSplit ; 2 )
	; isGlobal = Position ( options ; "g" ; 1 ; 1 )
	; type = Trim ( Substitute ( options ; ["g" ; "" ] ; [ "	" ; "" ] ) )
	
	//-- Use default value if necessary
	; value =
		If (
			not IsEmpty ( value ) ; value
			; Let ( [
				raw = GetValue ( rowSpli)
				v = Evaluate ( GetValue ( rowSplit ; 3 ) )
				] ;
				If ( v ≠ "?" ; v )
			)
		)
	
	//-- Instantiate variable (error returns '1')
	; error =
		If (
			not IsEmpty ( rowSplit )
				; VarSet ( "_" & name ; value ; type ; isGlobal )
		)
	
	] ;
	
	//-- Return names of invalid parameters
	List (
		  If ( not isOptional and error = 1 ; name )
		; If ( rowCount > 1
			; ParamAssignLoop ( RightValues ( listOfParams ; rowCount - 1 ) )
		)
	)
)

/* —————————————————————————————— //
NAME:
	ParamAssignLoop ( listOfParams )

PURPOSE:
	Instantiates named parameters, with optional type casting and validation.

PARAMETERS:
	See ManParamAssing() for documentation.

HISTORY:
	Created: 2012-Jan-23 14h53 PST — Donovan A. Chandler
*/