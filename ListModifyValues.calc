Case (

	ValueCount ( text ) > 0;
	Let ([
		vValueCur = LeftValues ( Substitute ( text ; [ "\“" ; "\"" ] ; [ "\”" ; "\"" ] ; [ "\"" ; "\\\""] ) ; 1) ;
		exComplete =
			Substitute ( expression ;
				[ valuePlaceholder ; "\"" & Substitute ( vValueCur ; ¶ ; "" ) & "\"" ]
			) ;
		vValEvaluated = Evaluate ( exComplete ) ;
		numValuesRem = ValueCount ( text ) - 1
		] ;
		Substitute ( vValEvaluated ; "\\\"" ; "\"" )
		& If ( numValuesRem > 0 ; ¶ )
		& ListModifyValues (
			RightValues ( text ; numValuesRem ) ;
			valuePlaceholder ;
			expression
		)
	)

)

/* __________________________________________________

NAME:   ListModifyValues ( text ; valuePlaceholder ; expression )
PURPOSE:    Applies expression to each return-delimited value in text.
EXAMPLES:
	ListModifyValues ( "dog¶cat¶mouse"; "[v]"; "Left( [v]; 2 )" ) = "do¶ca¶mo"
HISTORY:
	Compliments to Fabrice Nordmann of BH&A for example of this expression evaluation technique
	Created:    2010-02-10 00:00 PT - Donovan Chandler
	Modified:   2013-04-22 09:39 PT - Donovan Chandler : Updated formatting.
*/