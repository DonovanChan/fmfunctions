Let ( [
	delimiter = "::‡::" ;
	char = GetValue ( charsToTrimList ; 1 ) ;
	char = 
		Case (
			not IsEmpty ( char ) ; char ;
			not IsEmpty ( charsToTrimList ) ; charsToTrimList ; // accounts for LF
			""
		) ;
	result =
		Substitute (
			Trim (
				Substitute ( text ;
					[ " " ; delimiter ] ;
					[ char ; " " ]
				)
			) ;
			[ " " ; char ] ;
			[ delimiter ; " " ]
		)
	] ;
	Case (
		ValueCount ( charsToTrimList ) > 1 ;
			TrimChars ( result ; LeftWords ( MiddleValues ( charsToTrimList ; 2 ; 999 ) ; 999 ) ) ;
		result
	)
)

/* —————————————————————————————— //
NAME:
	TrimChars ( text ; charsToTrimList )
	
PURPOSE:
	Trims leading and trailing occurrences of character from text

NOTES:
	Does NOT work with consecutive line terminators like CR and LF

HISTORY:
	Created: 2011-Jul-09 21h26 PST — Donovan Chandler
	Modified: 2011-Sep-28 14h22 PST — Donovan Chandler ; now accepts list of chars to trim
*/