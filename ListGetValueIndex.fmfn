Let ( [
	~list = If ( Left ( listOfValues ; 1 ) <> "¶" ; "¶" & listOfValues ; listOfValues) & "¶" ;
	~matchStart =
		Case (
			//-- Case-Sensitive PatternCount
			matchcase ;
				Let ([
					marker = "%!Match!%" ;
					vSearchList = Substitute ( ~list ; searchString ; marker )
					] ;
					Position ( vSearchList ; marker ; 1 ; 1 )
				) ;

			//-- Normal Case-Insensitive PatternCount
			Position ( ~list ; searchString ; 1 ; 1 )
		)
	] ;
	If ( ~matchStart ; PatternCount ( Left ( ~list ; ~matchStart ) ; "¶" ) ; 0 )
)

/* __________________________________________________

NAME:   ListIndexContaining ( listOfValues ; searchString ; matchCase )
PURPOSE:    Searches a return-delimited list for the first occurrence of the given value.
			Returns index/row number of first value *containing* searchString.
TESTS:
	List (
	ListIndex ( "John¶Paul¶George¶Ringo" ; "ringo" ; False ) = 4 ;
	ListIndex ( "John¶Paul¶George¶Ringo" ; "ringo" ; True ) = 0 ;
	ListIndex ( "John¶Paul¶George¶Ringo" ; "ring" ; False ) = 4 ;
	ListIndex ( "John¶Paul¶George¶Ringo" ; "ohn¶P" ; False ) = 1 ;
	)
HISTORY:
	Created:    2008-06-16 00:00 PT - Donovan Chandler based on function by Theo Ross
	Modified:   2013-12-09 21:26 PT - Donovan Chandler : Reformatted ; expanded tests.
*/