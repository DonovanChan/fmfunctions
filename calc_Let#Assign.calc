/*-- Parse Let variables into script $variables --*/

/**
 * =====================================
 *
 * PURPOSE:
 * 		Parse the any valid Let Variable string to declare and populate a
 * 		series of locally-scoped script variables. #Assign also handles native
 * 		Let() function formatting which limits dependancies on #() by other custom fuctions.
 *
 * RETURNS:
 * 		True (1) when parameters is a valid set of name-value pairs (which includes
 * 		the empty string); False (0) otherwise.
 *
 * PARAMETERS:
 * 		parameters: The (potentially Null) string of name-value pairs to parse into
 * 		variables.
 *
 * EXAMPLES:
 * 		set the first ~parameter variable below to the string that contains the Let Variables
 *
 * DEPENDENCIES: none
 *
 * NOTE:
 * 		To be accessible outside this function, variable declarations in parameters
 * 		must use the $- or $$-prefixed notation for FileMaker variables. This
 * 		function does not handle that for you.
 *
 * HISTORY:
 *             MODIFEDIED on 2013-03-25 by todd@geistinteractive.com refactored for use in a script instead of as custom function
 * 		MODIFIED on 2011-03-03 by matt@filemakermagazine.com to not use $void and
 * 		only include trailing $~ if parameters is non conforming to Let()
 * 		MODIFIED on 2010-10-04 by jeremy@kyologic.com to return explicit True or
 * 		False values indicating successful evaluation of the script result, and to
 * 		fit syntax inspired by a comment on standards.filemakermagazine.com by
 * 		Richard Dyce.
 * 		CREATED on 2010-03-13 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * 		INSPIRED by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 * 		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */

Let (
[
//     set "~parameters" to a Valid Let Variables String for ex. Get (ScriptParameter) or Get (ScriptResults)



        ~parameters =  Get (ScriptParameter);



//---------- NO NEED TO EDIT BELOW HERE -----------------

	~evaluateString =
		"Let( [¶"
		& ~parameters
		& If ( Right ( ~parameters; 1 ) = ";"
				or Right ( ~parameters ; 1 ) = ¶;
				"$~ = $~")  //terminating variable to keep semicolon-delimited sytax in parameters consistent
		& "¶];¶"
		& "True¶)"

];	//end variable definitions

	If ( IsValidExpression ( ~evaluateString );
			Evaluate ( ~evaluateString );
		//else, ~evaluateString is not a valid expression...
		False
	)
)

/*
Unit tests
Accounting for both a native Let() format and the more
explicit formatting from #()

List(
#Assign ( # ( "foo" ; "bar" ) ); // using # without $
#Assign ( # ( "$foo" ; "bar" ) ); // using # with $
#Assign ( # ( "$foo" ; "bar" ) & # ( "bar" ; "baz" ) ); // concatenated #()
#Assign ( List ( # ( "foo" ; "bar" ); # ( "$bar" ; "baz" ) ) ); // List with & without $
#Assign ( "$foo = \"bar\"" ); // single line raw  Let declaration
#Assign ( "$foo = \"bar\";¶$bar = \"baz\""); // multi-line raw Let
)
*/